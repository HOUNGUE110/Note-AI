import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_gemini/flutter_gemini.dart';
import 'database_manager.dart';
import 'note.dart';
import 'package:flutter_gemini/src/models/part/part.dart';

class AiNotePage extends StatefulWidget {
  const AiNotePage({super.key});

  @override
  State<AiNotePage> createState() => _AiNotePageState();
}

class _AiNotePageState extends State<AiNotePage> {
  final Gemini gemini = Gemini.instance;
  final TextEditingController _promptController = TextEditingController();
  final TextEditingController _titreController = TextEditingController();
  final TextEditingController _contenuController = TextEditingController();

  late DatabaseManager _databaseManager;
  bool _isLoading = true;
  bool _isGenerating = false; // Nouvel état pour la génération

  @override
  void initState() {
    super.initState();
    _initializeDatabaseManager();
  }

  Future<void> _initializeDatabaseManager() async {
    _databaseManager = await DatabaseManager.getInstance();
    setState(() {
      _isLoading = false;
    });
  }

  void _generate() async {
    final prompt = _promptController.text;
    if (prompt.isNotEmpty) {
      setState(() {
        _isGenerating = true; // Démarre l'indicateur
      });
      try {
        final value = await gemini.text(prompt);
        setState(() {
          final generatedText = (value?.content?.parts?.last is TextPart)
              ? (value?.content?.parts?.last as TextPart).text ?? 'Erreur de génération'
              : 'Erreur de génération';
          _contenuController.text = generatedText;
          _titreController.text = prompt;
        });
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erreur de génération : ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      } finally {
        setState(() {
          _isGenerating = false; // Arrête l'indicateur
        });
      }
    }
  }

  Future<void> _saveNote() async {
    final titre = _titreController.text;
    final contenu = _contenuController.text;

    if (titre.isEmpty || contenu.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Veuillez remplir tous les champs'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    try {
      final nouvelleNote = Note(
        titre: titre,
        contenu: contenu,
        dateCreation: DateTime.now(),
      );
      await _databaseManager.insertNote(nouvelleNote);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Note enregistrée avec succès !'),
          backgroundColor: Colors.green,
        ),
      );
      Navigator.of(context).pop();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Erreur lors de l\'enregistrement de la note'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 231, 243, 255),
      appBar: AppBar(
        title: Text(
          'Générer une note avec l\'IA',
          style: GoogleFonts.raleway(color: Colors.white),
        ),
        backgroundColor: Colors.indigo,
        iconTheme: const IconThemeData(color: Colors.white),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _promptController,
              decoration: InputDecoration(
                labelText: 'Votre requête pour l\'IA',
                labelStyle: GoogleFonts.raleway(color: Colors.black),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                filled: true,
                fillColor: Colors.white.withOpacity(0.1),
              ),
              style: GoogleFonts.raleway(color: Colors.black),
              maxLines: null,
            ),
            const SizedBox(height: 10),
            ElevatedButton.icon(
              onPressed: _isGenerating ? null : _generate,
              icon: const Icon(Icons.flash_on, color: Colors.indigo),
              label: Text(
                _isGenerating ? 'Génération...' : 'Générer avec Gemini',
                style: GoogleFonts.roboto(
                  color: Colors.indigo,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                side: const BorderSide(color: Colors.indigo, width: 2),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
              ),
            ),
            if (_isGenerating)
              const Padding(
                padding: EdgeInsets.symmetric(vertical: 10),
                child: Center(
                  child: CircularProgressIndicator(),
                ),
              ),
            const SizedBox(height: 20),
            TextField(
              controller: _titreController,
              decoration: InputDecoration(
                labelText: 'Titre',
                labelStyle: GoogleFonts.raleway(color: Colors.black),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                filled: true,
                fillColor: Colors.white.withOpacity(0.1),
              ),
              style: GoogleFonts.raleway(color: Colors.black),
            ),
            const SizedBox(height: 20),
            TextField(
              controller: _contenuController,
              decoration: InputDecoration(
                labelText: 'Contenu',
                labelStyle: GoogleFonts.raleway(color: Colors.black),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                filled: true,
                fillColor: Colors.white.withOpacity(0.1),
              ),
              style: GoogleFonts.raleway(color: Colors.black),
              maxLines: null,
              keyboardType: TextInputType.multiline,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _saveNote,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.indigo,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                padding: const EdgeInsets.symmetric(
                  horizontal: 50,
                  vertical: 15,
                ),
              ),
              child: Text(
                'Enregistrer la note',
                style: GoogleFonts.raleway(
                  fontSize: 21,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}